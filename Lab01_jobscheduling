#include <stdio.h>
#include <stdlib.h>

struct Job {
    int id;       // Job ID
    int deadline; // Deadline of job
    int profit;   // Profit of job
};

// Comparison function to sort jobs in decreasing order of profit
int compare(const void *a, const void *b) {
    struct Job *jobA = (struct Job *)a;
    struct Job *jobB = (struct Job *)b;
    return (jobB->profit - jobA->profit); // Descending order of profit
}

// Function to find the maximum deadline among all jobs
int findMaxDeadline(struct Job jobs[], int n) {
    int max = jobs[0].deadline;
    for (int i = 1; i < n; i++) {
        if (jobs[i].deadline > max)
            max = jobs[i].deadline;
    }
    return max;
}

// Function to schedule jobs to maximize profit
void jobScheduling(struct Job jobs[], int n) {
    // Sort jobs based on their profit in descending order
    qsort(jobs, n, sizeof(struct Job), compare);

    int max_deadline = findMaxDeadline(jobs, n);

    // Array to keep track of the time slots
    int result[max_deadline + 1];  // Track filled time slots
    for (int i = 0; i <= max_deadline; i++)
        result[i] = -1;  // Initialize all time slots to -1 (unoccupied)

    int jobCount = 0;
    int totalProfit = 0;

    // Iterate through all jobs
    for (int i = 0; i < n; i++) {
        // Try to find a free slot for this job, starting from its deadline
        for (int j = jobs[i].deadline; j > 0; j--) {
            if (result[j] == -1) {  // If the slot is free
                result[j] = jobs[i].id;  // Assign the job to the slot
                jobCount++;
                totalProfit += jobs[i].profit;
                break;
            }
        }
    }

    // Display the result
    printf("Job sequence that maximizes profit:\n");
    for (int i = 1; i <= max_deadline; i++) {
        if (result[i] != -1)
            printf("Job %d\n", result[i]);
    }
    printf("Total number of jobs done: %d\n", jobCount);
    printf("Total profit: %d\n", totalProfit);
}

int main() {
    int n;

    // Input the number of jobs
    printf("Enter the number of jobs: ");
    scanf("%d", &n);

    struct Job jobs[n];

    // Input job details
    for (int i = 0; i < n; i++) {
        printf("Enter deadline and profit for job %d: ", i + 1);
        scanf("%d %d", &jobs[i].deadline, &jobs[i].profit);
        jobs[i].id = i + 1;
    }

    // Schedule the jobs to maximize profit
    jobScheduling(jobs, n);

    return 0;
}
